version: '3.9'

services:
  # ========== Databases ==========
  postgres:
    image: pgvector/pgvector:pg16
    container_name: qbank-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-qbank}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-qbank_secure_pwd}
      POSTGRES_DB: ${POSTGRES_DB:-qbank}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-qbank}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: qbank-redis
    command: >
      redis-server 
      --appendonly yes 
      --maxmemory 2gb 
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-redis_secure_pwd}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ========== Message Queue ==========
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: qbank-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-qbank}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_secure_pwd}
      RABBITMQ_DEFAULT_VHOST: qbank
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ========== Search & Analytics ==========
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: qbank-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.enrollment.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-elastic_secure_pwd}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD:-elastic_secure_pwd} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: qbank-kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: ${ELASTIC_PASSWORD:-elastic_secure_pwd}
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - qbank-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # ========== Object Storage ==========
  minio:
    image: minio/minio:latest
    container_name: qbank-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minio_secure_pwd}
    volumes:
      - minio_data:/data
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - qbank-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: unless-stopped

  # ========== Backend Application ==========
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qbank-backend
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-qbank}:${POSTGRES_PASSWORD:-qbank_secure_pwd}@postgres:5432/${POSTGRES_DB:-qbank}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/0
      - ELASTICSEARCH_URL=http://elastic:${ELASTIC_PASSWORD:-elastic_secure_pwd}@elasticsearch:9200
      - S3_ENDPOINT_URL=http://minio:9000
      - S3_ACCESS_KEY_ID=${MINIO_ROOT_USER:-minioadmin}
      - S3_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD:-minio_secure_pwd}
      - SECRET_KEY=${SECRET_KEY:-change-me-in-production}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - qbank-network
    depends_on:
      - postgres
      - redis
      - elasticsearch
      - rabbitmq
      - minio
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    restart: unless-stopped

  # ========== Celery Workers ==========
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qbank-celery-worker
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-qbank}:${POSTGRES_PASSWORD:-qbank_secure_pwd}@postgres:5432/${POSTGRES_DB:-qbank}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/0
      - CELERY_BROKER_URL=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/2
    volumes:
      - ./backend:/app
    networks:
      - qbank-network
    depends_on:
      - postgres
      - redis
      - rabbitmq
    command: celery -A app.tasks.celery_app worker --loglevel=info
    restart: unless-stopped

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: qbank-celery-beat
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - CELERY_BROKER_URL=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/2
    volumes:
      - ./backend:/app
    networks:
      - qbank-network
    depends_on:
      - redis
      - rabbitmq
    command: celery -A app.tasks.celery_app beat --loglevel=info
    restart: unless-stopped

  flower:
    image: mher/flower:latest
    container_name: qbank-flower
    environment:
      - CELERY_BROKER_URL=redis://default:${REDIS_PASSWORD:-redis_secure_pwd}@redis:6379/1
      - FLOWER_PORT=5555
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-flower_secure_pwd}
    ports:
      - "${FLOWER_PORT:-5555}:5555"
    networks:
      - qbank-network
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

  # ========== Frontend Application ==========
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: qbank-frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://backend:8000
      - NEXT_PUBLIC_WS_URL=ws://backend:8000/ws
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - NEXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN_FRONTEND}
      - NEXT_PUBLIC_POSTHOG_KEY=${POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${POSTHOG_HOST}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - qbank-network
    depends_on:
      - backend
    command: npm run dev
    restart: unless-stopped

  # ========== Monitoring ==========
  prometheus:
    image: prom/prometheus:latest
    container_name: qbank-prometheus
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - qbank-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: qbank-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-grafana_secure_pwd}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - qbank-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ========== Reverse Proxy ==========
  nginx:
    image: nginx:alpine
    container_name: qbank-nginx
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_cache:/var/cache/nginx
      - certbot_certs:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - qbank-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # ========== SSL Certificate Management ==========
  certbot:
    image: certbot/certbot:latest
    container_name: qbank-certbot
    volumes:
      - certbot_certs:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    networks:
      - qbank-network
    restart: unless-stopped

networks:
  qbank-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  elasticsearch_data:
  minio_data:
  backend_uploads:
  prometheus_data:
  grafana_data:
  nginx_cache:
  certbot_certs:
  certbot_www: